% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bp_stats.R
\name{bp_stats}
\alias{bp_stats}
\title{Aggregated BP Summary Statistics}
\usage{
bp_stats(
  data,
  inc_date = FALSE,
  subj = NULL,
  bp_type = c("both", "sbp", "dbp"),
  add_groups = NULL,
  inc_wake = TRUE
)
}
\arguments{
\item{data}{Required argument. Pre-processed dataframe containing SBP and
DBP with optional ID, VISIT, WAKE, and DATE columns if available.
Use \code{process_data} to properly format data.}

\item{inc_date}{Optional argument. Default is FALSE. As ABPM data typically
overlaps due to falling asleep on one date and waking up on another, the \code{inc_date}
argument is typically kept as FALSE, but the function will work regardless. Setting
\code{inc_date = TRUE} will include these dates as a grouping level.}

\item{subj}{Optional argument. Allows the user to specify and subset specific subjects
from the \code{ID} column of the supplied data set. The \code{subj} argument can be a single
value or a vector of elements. The input type should be character, but the function will
comply with integers so long as they are all present in the \code{ID} column of the data.}

\item{bp_type}{Optional argument. Determines whether to calculate magnitude for SBP
values or DBP values, or both. For \strong{both SBP and DBP} ARV values use bp_type = 'both',
for \strong{SBP-only} use bp_type = 'sbp, and for \strong{DBP-only} use bp_type = 'dbp'.
If no type specified, default will be set to 'both'}

\item{add_groups}{Optional argument. Allows the user to aggregate the data by an
additional "group" to further refine the output. The supplied input must be a
character vector with the strings corresponding to existing column names of the
processed \code{data} input supplied. Capitalization of \code{add_groups} does not matter.
Ex: \code{add_groups = c("Time_of_Day")}}

\item{inc_wake}{Optional argument corresponding to whether or not to include \code{WAKE}
in the grouping of the final output (if \code{WAKE} column is available). By default,
\code{inc_wake = TRUE} which will include the \code{WAKE} column in the groups by which
to calculate the respective metrics.}
}
\value{
A tibble object with a row corresponding to each subject, or alternatively
a row corresponding to each date, if inc_date = TRUE. The resulting tibble consists of:
\itemize{

   \item \code{ID}: The unique identifier of the subject. For single-subject datasets, ID = 1
   \item \code{N}: The number of observations for that particular grouping. If \code{inc_date = TRUE},
   \code{N} corresponds to the number of observations for that date. If \code{inc_date = FALSE}, N
   corresponds to the number of observations for the most granular grouping available (i.e.
   a combination of \code{ID}, \code{VISIT}, and \code{WAKE})
   \item \code{VISIT}: (If applicable) Corresponds to the visit # of the subject, if more than 1
   \item \code{WAKE}: (If applicable) Corresponds to the awake status of the subject (0 = asleep |
   1 = awake)
   \item Output from the following functions: \code{bp_center}, \code{bp_cv}, \code{bp_arv}, \code{bp_sv},
   \code{bp_mag}, \code{bp_range}
   \item Any add_groups variables supplied to function argument will be present as a column in the
   resulting tibble.

}
}
\description{
Combines the output from the following functions:
\itemize{

   \item \code{bp_center}
   \item \code{bp_cv}
   \item \code{bp_arv}
   \item \code{bp_sv}
   \item \code{bp_mag}
   \item \code{bp_range}

}
}
\examples{
# Load data
data(bp_hypnos)
data(bp_jhs)

# Process bp_hypnos
hyp_proc <- process_data(bp_hypnos, sbp = "SYST", dbp = "DIAST", date_time = "date.time",
id = "id", wake = "wake", visit = "visit", hr = "hr", pp ="pp", map = "map", rpp = "rpp")
# Process bp_jhs data
jhs_proc <- process_data(bp_jhs, sbp = "Sys.mmHg.", dbp = "Dias.mmHg.", date_time = "DateTime",
hr = "Pulse.bpm.")

# BP Stats Aggregated Table
bp_stats(hyp_proc, subj = c(70417, 70435), add_groups = c("SBP_Category"), bp_type = 'sbp')
bp_stats(jhs_proc, add_groups = c("SBP_Category"))
}
